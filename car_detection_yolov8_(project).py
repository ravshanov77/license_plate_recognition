# -*- coding: utf-8 -*-
"""car detection yolov8 (project).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r-Tz3GWNF79LDvwrPKZYXgDx6AE3mN39

# **Installing ultrlytics**
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install ultralytics

"""# **packages**"""

import torch
import cv2 as cv
import numpy as np
from PIL import Image
from pathlib import Path
import matplotlib.pyplot as plt

from ultralytics import YOLO, hub
from google.colab.patches import cv2_imshow

"""# **model preprocessing**"""

model = YOLO('yolov8s')

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)

"""# **data preprocessing**"""

!wget  -O test_image.jpg 'https://static.ca-news.org/upload/ennews/6/669656.1649052690.b.jpg'

!wget -O single.png "https://www.dropbox.com/scl/fi/iefa494nqof3lsxcw61th/photo_2023-12-23_13-20-46.jpg?rlkey=k328si1mc0woqmfbdrblorheq&dl=0"

# image preprocessing
img = Image.open('single.png')
img = np.array(img)

"""# **Car detection (model1)**"""

car_detect = model(img)

# separating only cars from the predictions
cars = car_detect[0].boxes[car_detect[0].boxes.cls==2.]

#drawing bbox
def draw_bbox(img, labels):

  x = 0
  while x < len(labels):
    for i in labels:
      img = cv.rectangle(img, (int(i[0]), int(i[1])), (int(i[2]), int(i[3])), color=[0,255,0], thickness=2)

      img = cv.putText(img, 'car', org=(int(i[0]), int(i[1]) - 5),
                       fontFace=int(img.shape[0] ** .15),
                       fontScale=int(img.shape[0] ** .1),
                       color=[255,0,0],
                       thickness=int(img.shape[0] ** .1))

      font = cv.FONT_HERSHEY_SIMPLEX
    x += 1

  return img

img1 = draw_bbox(img, labels=cars.xyxy)

plt.imshow(img1)
plt.show()

"""# **Licence plate detection (model 2)**"""

# !wget -O licence.pt  'https://hub.ultralytics.com/models/3LuRsG44En0vpyEhtpmt'

model2 = YOLO('licence.pt')

licence_detect = model2(img)

licence_detect[0].boxes

#drawing bbox for licence plate
def draw_bbox_lp(img, labels):

  x = 0
  while x < len(labels):
    for i in labels:
      img = cv.rectangle(img, (int(i[0]), int(i[1])), (int(i[2]), int(i[3])), color=[0,255,0], thickness=int(img.shape[0] ** .2))

      img = cv.putText(img, 'number', org=(int(i[0]), int(i[1]) - 5),
                       fontFace=int(img.shape[0] ** .11),
                       fontScale=int(img.shape[0] ** .1),
                       color=[255,0,0],
                       thickness=int(img.shape[0] ** .15))

      font = cv.FONT_HERSHEY_SIMPLEX

    x += 1

  return img

img2 = draw_bbox_lp(img1, licence_detect[0].boxes.xyxy)

plt.imshow(img2)
plt.show()

x1, y1, x2, y2 = licence_detect[0].boxes.xyxy[0].numpy()

licence_plate = img2[int(x1):int(x2), int(y1):int(x2)]

x1 = int(x1)
y1 = int(y1)
x2 = int(x2)
y2 = int(y2)

w = int(x2 - x1)
h = int(y2 - y1)

crop_img = img1[y1:y1+h, x1:x1+w]
cv2_imshow(crop_img)

print(true_seq)

print(converted_list)

print(actual_num)

plt.imshow(crop_img)
plt.show()

"""# **Alpha-numeric detection (model 3)**"""

model3 = YOLO('alpha_num.pt')

alpha = model3(crop_img)

mixed_result = [alpha[0].names.get(int(x)) for x in alpha[0].boxes.cls]
print(mixed_result)

list_z = list(zip(alpha[0].boxes.cls.numpy(), alpha[0].boxes.xyxy.numpy()))
print(list_z)

list_z

cls = sorted(list_z, key=lambda x: x[1][0])
list_x = []
for cl, box in cls:
    list_x.append(int(cl))

print(list_x)

true_seq = [alpha[0].names.get(y) for y in list_x]
print(true_seq)

# Mapping of string numbers to their integer representations
number_mapping = {
    'zero': '0',
    'one': '1',
    'two': '2',
    'three': '3',
    'four': '4',
    'five': '5',
    'six': '6',
    'seven': '7',
    'eight': '8',
    'nine': '9',
    # Add more numbers as needed
}

# Your original list
original_list = true_seq

# Convert string numbers to integers while keeping other items unchanged
converted_list = [number_mapping[item] if item in number_mapping else item for item in original_list]

# Print the result
print(converted_list)

actual_num = "".join(converted_list)

"""# **Detecting licence number**"""

#drawing bbox for licence number
def draw_bbox_ln(img, labels):

  x = 0
  while x < len(labels):
    for i in labels:
      img = cv.rectangle(img, (int(i[0]), int(i[1])), (int(i[2]), int(i[3])), color=[0,255,0], thickness=int(img.shape[0] ** .2))

      img = cv.putText(img, actual_num, org=(int(i[0]), int(i[1]) - 5),
                       fontFace=int(img.shape[0] ** .1),
                       fontScale=int(img.shape[0] ** .14),
                       color=[255,0,0],
                       thickness=int(img.shape[0] ** .17))

      font = cv.FONT_HERSHEY_SIMPLEX

    x += 1

  return img

img = cv.imread('single.png')
img = np.array(img)

img3 = draw_bbox_ln(img, licence_detect[0].boxes.xyxy)

cv2_imshow(img3)

